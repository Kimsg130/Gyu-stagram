plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.4'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.kimsg130'
version = '0.0.3-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenCentral()
}

dependencies { // TODO : 날 잡고 정리한번 하기
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' // 타임리프
	implementation 'org.springframework.boot:spring-boot-starter-web'       // 스프링부트 웹
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'mysql:mysql-connector-java:8.0.32'						// mysql
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'  // JPA
	compileOnly 'org.projectlombok:lombok'                                  // 롬복
	annotationProcessor 'org.projectlombok:lombok'                          // 롬복(어노테이션)
	compileOnly("org.springframework.boot:spring-boot-devtools") 			//devtools 서버를 닫았다 킬 공정을 줄여줌
	implementation 'org.springframework.boot:spring-boot-starter-security:3.0.4'  // 스프링시큐리티
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'						// JWT
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'						// JWT
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'					// JWT

	// 테스트
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation("org.junit.vintage:junit-vintage-engine") {
		exclude group: "org.hamcrest", module: "hamcrest-core"
	}
}

//tasks.named('test') {
//	useJUnitPlatform()
//}

def frontendDir = "$projectDir/src/main/frontend"

sourceSets {
	main {
		resources { srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install' }
	else {
		commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
	}
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

task copyReactBuildFiles(type: Copy) {
	dependsOn "buildReact"
	from "$frontendDir/build"
	into "$projectDir/src/main/resources/static"
}